
RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b00  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000c0c  08000c0c  00010c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08000c18  08000c18  00010c18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000c1c  08000c1c  00010c1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  00010c20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000002c8  20000000  08000c20  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  200002c8  08000c20  000202c8  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00010c20  2**0
                  CONTENTS, READONLY
  9 .debug_line   00001c82  00000000  00000000  00010c49  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000025b5  00000000  00000000  000128cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000f2c  00000000  00000000  00014e80  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000490  00000000  00000000  00015db0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000398  00000000  00000000  00016240  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  000016c6  00000000  00000000  000165d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00006799  00000000  00000000  00017c9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0001e437  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000df8  00000000  00000000  0001e4b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000000 	.word	0x20000000
 8000128:	00000000 	.word	0x00000000
 800012c:	08000bf4 	.word	0x08000bf4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000004 	.word	0x20000004
 8000148:	08000bf4 	.word	0x08000bf4

0800014c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800014c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000184 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000150:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000152:	e003      	b.n	800015c <LoopCopyDataInit>

08000154 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000154:	4b0c      	ldr	r3, [pc, #48]	; (8000188 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8000156:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000158:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800015a:	3104      	adds	r1, #4

0800015c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800015c:	480b      	ldr	r0, [pc, #44]	; (800018c <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 800015e:	4b0c      	ldr	r3, [pc, #48]	; (8000190 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8000160:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000162:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000164:	d3f6      	bcc.n	8000154 <CopyDataInit>
	ldr	r2, =_sbss
 8000166:	4a0b      	ldr	r2, [pc, #44]	; (8000194 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8000168:	e002      	b.n	8000170 <LoopFillZerobss>

0800016a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800016a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800016c:	f842 3b04 	str.w	r3, [r2], #4

08000170 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000170:	4b09      	ldr	r3, [pc, #36]	; (8000198 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8000172:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000174:	d3f9      	bcc.n	800016a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000176:	f000 fabb 	bl	80006f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800017a:	f000 fd17 	bl	8000bac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800017e:	f000 f82d 	bl	80001dc <main>
	bx	lr
 8000182:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000184:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8000188:	08000c20 	.word	0x08000c20
	ldr	r0, =_sdata
 800018c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000190:	20000000 	.word	0x20000000
	ldr	r2, =_sbss
 8000194:	20000000 	.word	0x20000000
	ldr	r3, = _ebss
 8000198:	200002c8 	.word	0x200002c8

0800019c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800019c:	e7fe      	b.n	800019c <ADC1_2_IRQHandler>

0800019e <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800019e:	b480      	push	{r7}
 80001a0:	af00      	add	r7, sp, #0
}
 80001a2:	bf00      	nop
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bc80      	pop	{r7}
 80001a8:	4770      	bx	lr

080001aa <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80001aa:	b480      	push	{r7}
 80001ac:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80001ae:	e7fe      	b.n	80001ae <HardFault_Handler+0x4>

080001b0 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80001b0:	b480      	push	{r7}
 80001b2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80001b4:	e7fe      	b.n	80001b4 <MemManage_Handler+0x4>

080001b6 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80001b6:	b480      	push	{r7}
 80001b8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80001ba:	e7fe      	b.n	80001ba <BusFault_Handler+0x4>

080001bc <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80001bc:	b480      	push	{r7}
 80001be:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80001c0:	e7fe      	b.n	80001c0 <UsageFault_Handler+0x4>

080001c2 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80001c2:	b480      	push	{r7}
 80001c4:	af00      	add	r7, sp, #0
}
 80001c6:	bf00      	nop
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bc80      	pop	{r7}
 80001cc:	4770      	bx	lr

080001ce <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80001ce:	b480      	push	{r7}
 80001d0:	af00      	add	r7, sp, #0
}
 80001d2:	bf00      	nop
 80001d4:	46bd      	mov	sp, r7
 80001d6:	bc80      	pop	{r7}
 80001d8:	4770      	bx	lr
	...

080001dc <main>:
THREAD_HANDLER(Thread1_H);
THREAD_HANDLER(Thread2_H);

/* Private functions */
int main(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	b086      	sub	sp, #24
 80001e0:	af02      	add	r7, sp, #8
	RCC_EnableGPIOC();
 80001e2:	f000 f9e7 	bl	80005b4 <RCC_EnableGPIOC>
	//GPIO_t canRX = {GPIOA, 11, GPIO_OUTPUT_AF_PUSH_PULL};
	//GPIO_t canTX = {GPIOA, 12, GPIO_OUTPUT_AF_PUSH_PULL};
	GPIO_t led = {GPIOC, 13, GPIO_OUTPUT_GP_PUSH_PULL};
 80001e6:	4a11      	ldr	r2, [pc, #68]	; (800022c <main+0x50>)
 80001e8:	1d3b      	adds	r3, r7, #4
 80001ea:	ca07      	ldmia	r2, {r0, r1, r2}
 80001ec:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	GPIO_Init(&led);
 80001f0:	1d3b      	adds	r3, r7, #4
 80001f2:	4618      	mov	r0, r3
 80001f4:	f000 f886 	bl	8000304 <GPIO_Init>
	GPIO_SetPinValue(GPIOC, 13, HIGH);
 80001f8:	2201      	movs	r2, #1
 80001fa:	210d      	movs	r1, #13
 80001fc:	480c      	ldr	r0, [pc, #48]	; (8000230 <main+0x54>)
 80001fe:	f000 f8e6 	bl	80003ce <GPIO_SetPinValue>
	//GPIO_Init(&canRX);
	//GPIO_Init(&canTX);

	//RCC_EnableCAN();
	//CAN_Init();
	OS_init();
 8000202:	f000 faf5 	bl	80007f0 <OS_init>

	t1Ctrl = OSThread_Create(&thread1, 2, &Thread1_H, stack_Thread1, sizeof(stack_Thread1));
 8000206:	23a0      	movs	r3, #160	; 0xa0
 8000208:	9300      	str	r3, [sp, #0]
 800020a:	4b0a      	ldr	r3, [pc, #40]	; (8000234 <main+0x58>)
 800020c:	4a0a      	ldr	r2, [pc, #40]	; (8000238 <main+0x5c>)
 800020e:	2102      	movs	r1, #2
 8000210:	480a      	ldr	r0, [pc, #40]	; (800023c <main+0x60>)
 8000212:	f000 fbef 	bl	80009f4 <OSThread_Create>
 8000216:	4602      	mov	r2, r0
 8000218:	4b09      	ldr	r3, [pc, #36]	; (8000240 <main+0x64>)
 800021a:	601a      	str	r2, [r3, #0]
	//OSThread_Create(&thread2, 2, &Thread2_H, stack_Thread2, sizeof(stack_Thread2));

	OS_run();
 800021c:	f000 fb64 	bl	80008e8 <OS_run>
 8000220:	2300      	movs	r3, #0
}
 8000222:	4618      	mov	r0, r3
 8000224:	3710      	adds	r7, #16
 8000226:	46bd      	mov	sp, r7
 8000228:	bd80      	pop	{r7, pc}
 800022a:	bf00      	nop
 800022c:	08000c0c 	.word	0x08000c0c
 8000230:	40011000 	.word	0x40011000
 8000234:	200000d0 	.word	0x200000d0
 8000238:	08000245 	.word	0x08000245
 800023c:	20000170 	.word	0x20000170
 8000240:	20000020 	.word	0x20000020

08000244 <Thread1_H>:
THREAD_HANDLER(Thread1_H)
{
	while(1)
	{
		//CAN_Transmit();
		GPIO_SetPinValue(GPIOC, 13, HIGH);
 8000244:	2201      	movs	r2, #1
 8000246:	210d      	movs	r1, #13
 8000248:	4808      	ldr	r0, [pc, #32]	; (800026c <Thread1_H+0x28>)
 800024a:	f000 f8c0 	bl	80003ce <GPIO_SetPinValue>
		OSThread_Delay(1000);
 800024e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000252:	f000 fb9f 	bl	8000994 <OSThread_Delay>
		GPIO_SetPinValue(GPIOC, 13, LOW);
 8000256:	2200      	movs	r2, #0
 8000258:	210d      	movs	r1, #13
 800025a:	4804      	ldr	r0, [pc, #16]	; (800026c <Thread1_H+0x28>)
 800025c:	f000 f8b7 	bl	80003ce <GPIO_SetPinValue>
		OSThread_Delay(1000);
 8000260:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000264:	f000 fb96 	bl	8000994 <OSThread_Delay>
		GPIO_SetPinValue(GPIOC, 13, HIGH);
 8000268:	e7ec      	b.n	8000244 <Thread1_H>
 800026a:	bf00      	nop
 800026c:	40011000 	.word	0x40011000

08000270 <Interrupts_SetPriority>:
#include "Interrupts_config.h"
#include "Interrupts_interface.h"

/* Set Interrupt Priority */
void Interrupts_SetPriority(s32 IRQn, u32 priority)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
 8000278:	6039      	str	r1, [r7, #0]
  if(IRQn < 0)
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	2b00      	cmp	r3, #0
 800027e:	da04      	bge.n	800028a <Interrupts_SetPriority+0x1a>
  {
	  SCB_SetSystemPriority(IRQn, priority);
 8000280:	6839      	ldr	r1, [r7, #0]
 8000282:	6878      	ldr	r0, [r7, #4]
 8000284:	f000 f9b6 	bl	80005f4 <SCB_SetSystemPriority>
  else
  {
	  NVIC_SetDevicePriority(IRQn, priority);
  }

}
 8000288:	e003      	b.n	8000292 <Interrupts_SetPriority+0x22>
	  NVIC_SetDevicePriority(IRQn, priority);
 800028a:	6839      	ldr	r1, [r7, #0]
 800028c:	6878      	ldr	r0, [r7, #4]
 800028e:	f000 f8d5 	bl	800043c <NVIC_SetDevicePriority>
}
 8000292:	bf00      	nop
 8000294:	3708      	adds	r7, #8
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}

0800029a <Interrupts_PendSVSetPending>:
{
	return NVIC_GetDevicePriority(IRQn);
}

void Interrupts_PendSVSetPending(void)
{
 800029a:	b580      	push	{r7, lr}
 800029c:	af00      	add	r7, sp, #0
	SCB_PendSVSetPending();
 800029e:	f000 f9c3 	bl	8000628 <SCB_PendSVSetPending>
}
 80002a2:	bf00      	nop
 80002a4:	bd80      	pop	{r7, pc}
	...

080002a8 <Flash_EnablePrefetchBuffer>:
	}
	return Local_Error;
}

void Flash_EnablePrefetchBuffer(void)
{
 80002a8:	b480      	push	{r7}
 80002aa:	af00      	add	r7, sp, #0
	/* Enable Prefetch Buffer */
	FLASH->ACR |= FLASH_ACR_PRFTBE;
 80002ac:	4a04      	ldr	r2, [pc, #16]	; (80002c0 <Flash_EnablePrefetchBuffer+0x18>)
 80002ae:	4b04      	ldr	r3, [pc, #16]	; (80002c0 <Flash_EnablePrefetchBuffer+0x18>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	f043 0310 	orr.w	r3, r3, #16
 80002b6:	6013      	str	r3, [r2, #0]
}
 80002b8:	bf00      	nop
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bc80      	pop	{r7}
 80002be:	4770      	bx	lr
 80002c0:	40022000 	.word	0x40022000

080002c4 <Flash_SetLatency>:

STD_ERR Flash_SetLatency(u8 Latency)
{
 80002c4:	b480      	push	{r7}
 80002c6:	b085      	sub	sp, #20
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	4603      	mov	r3, r0
 80002cc:	71fb      	strb	r3, [r7, #7]
	STD_ERR Local_Error = ERR;
 80002ce:	2301      	movs	r3, #1
 80002d0:	73fb      	strb	r3, [r7, #15]

	if(Latency <= FLASH_LATENCY_2)
 80002d2:	79fb      	ldrb	r3, [r7, #7]
 80002d4:	2b02      	cmp	r3, #2
 80002d6:	d80d      	bhi.n	80002f4 <Flash_SetLatency+0x30>
	{
		/* Flash wait state */
		FLASH->ACR &= (u32)((u32)~FLASH_ACR_LATENCY);
 80002d8:	4a09      	ldr	r2, [pc, #36]	; (8000300 <Flash_SetLatency+0x3c>)
 80002da:	4b09      	ldr	r3, [pc, #36]	; (8000300 <Flash_SetLatency+0x3c>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	f023 0303 	bic.w	r3, r3, #3
 80002e2:	6013      	str	r3, [r2, #0]
		FLASH->ACR |= (u32)Latency;
 80002e4:	4906      	ldr	r1, [pc, #24]	; (8000300 <Flash_SetLatency+0x3c>)
 80002e6:	4b06      	ldr	r3, [pc, #24]	; (8000300 <Flash_SetLatency+0x3c>)
 80002e8:	681a      	ldr	r2, [r3, #0]
 80002ea:	79fb      	ldrb	r3, [r7, #7]
 80002ec:	4313      	orrs	r3, r2
 80002ee:	600b      	str	r3, [r1, #0]
		Local_Error = NO_ERR;
 80002f0:	2300      	movs	r3, #0
 80002f2:	73fb      	strb	r3, [r7, #15]
	else
	{
		/* Do Nothing */
	}

    return Local_Error;
 80002f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80002f6:	4618      	mov	r0, r3
 80002f8:	3714      	adds	r7, #20
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bc80      	pop	{r7}
 80002fe:	4770      	bx	lr
 8000300:	40022000 	.word	0x40022000

08000304 <GPIO_Init>:
#include <MCAL/GPIO/GPIO_private.h>



STD_ERR GPIO_Init(GPIO_t * gpio)
{
 8000304:	b480      	push	{r7}
 8000306:	b087      	sub	sp, #28
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
	STD_ERR Local_ERROR = NO_ERR;
 800030c:	2300      	movs	r3, #0
 800030e:	75fb      	strb	r3, [r7, #23]
	__IO u32 * Register = &(((GPIO_TypeDef *)(gpio->Port))->CRL);
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	613b      	str	r3, [r7, #16]
	u32 Local_Mode = gpio->Mode;
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	689b      	ldr	r3, [r3, #8]
 800031a:	60bb      	str	r3, [r7, #8]
	u32 Local_Pin = gpio->Pin;
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	685b      	ldr	r3, [r3, #4]
 8000320:	60fb      	str	r3, [r7, #12]

	if(Local_Pin <= GPIO_PIN_15)
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	2b0f      	cmp	r3, #15
 8000326:	d84a      	bhi.n	80003be <GPIO_Init+0xba>
	{
		if(Local_Pin >= GPIO_PIN_8)
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	2b07      	cmp	r3, #7
 800032c:	d906      	bls.n	800033c <GPIO_Init+0x38>
		{
			Local_Pin -= GPIO_PIN_8;
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	3b08      	subs	r3, #8
 8000332:	60fb      	str	r3, [r7, #12]
			Register = &(((GPIO_TypeDef *)(gpio->Port))->CRH);
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	3304      	adds	r3, #4
 800033a:	613b      	str	r3, [r7, #16]
		}

		if(Local_Mode <= GPIO_INPUT_PULLUP_PULLDOWN)
 800033c:	68bb      	ldr	r3, [r7, #8]
 800033e:	2b02      	cmp	r3, #2
 8000340:	d815      	bhi.n	800036e <GPIO_Init+0x6a>
		{
			*Register &= ~(0x0F << (Local_Pin * 4));
 8000342:	693b      	ldr	r3, [r7, #16]
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	68fa      	ldr	r2, [r7, #12]
 8000348:	0092      	lsls	r2, r2, #2
 800034a:	210f      	movs	r1, #15
 800034c:	fa01 f202 	lsl.w	r2, r1, r2
 8000350:	43d2      	mvns	r2, r2
 8000352:	401a      	ands	r2, r3
 8000354:	693b      	ldr	r3, [r7, #16]
 8000356:	601a      	str	r2, [r3, #0]
			*Register |= (Local_Mode << (Local_Pin * 4));
 8000358:	693b      	ldr	r3, [r7, #16]
 800035a:	681a      	ldr	r2, [r3, #0]
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	009b      	lsls	r3, r3, #2
 8000360:	68b9      	ldr	r1, [r7, #8]
 8000362:	fa01 f303 	lsl.w	r3, r1, r3
 8000366:	431a      	orrs	r2, r3
 8000368:	693b      	ldr	r3, [r7, #16]
 800036a:	601a      	str	r2, [r3, #0]
 800036c:	e029      	b.n	80003c2 <GPIO_Init+0xbe>
		}
		else if(Local_Mode <= GPIO_OUTPUT_AF_OPEN_DRAIN)
 800036e:	68bb      	ldr	r3, [r7, #8]
 8000370:	2b07      	cmp	r3, #7
 8000372:	d821      	bhi.n	80003b8 <GPIO_Init+0xb4>
		{
			*Register &= ~(0x0F << (Local_Pin * 4));
 8000374:	693b      	ldr	r3, [r7, #16]
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	68fa      	ldr	r2, [r7, #12]
 800037a:	0092      	lsls	r2, r2, #2
 800037c:	210f      	movs	r1, #15
 800037e:	fa01 f202 	lsl.w	r2, r1, r2
 8000382:	43d2      	mvns	r2, r2
 8000384:	401a      	ands	r2, r3
 8000386:	693b      	ldr	r3, [r7, #16]
 8000388:	601a      	str	r2, [r3, #0]
			*Register |= ((Local_Mode & 0b11) << (Local_Pin * 4));
 800038a:	693b      	ldr	r3, [r7, #16]
 800038c:	681a      	ldr	r2, [r3, #0]
 800038e:	68bb      	ldr	r3, [r7, #8]
 8000390:	f003 0103 	and.w	r1, r3, #3
 8000394:	68fb      	ldr	r3, [r7, #12]
 8000396:	009b      	lsls	r3, r3, #2
 8000398:	fa01 f303 	lsl.w	r3, r1, r3
 800039c:	431a      	orrs	r2, r3
 800039e:	693b      	ldr	r3, [r7, #16]
 80003a0:	601a      	str	r2, [r3, #0]
			*Register |= (GPIO_SPEED << (Local_Pin * 4));
 80003a2:	693b      	ldr	r3, [r7, #16]
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	68fa      	ldr	r2, [r7, #12]
 80003a8:	0092      	lsls	r2, r2, #2
 80003aa:	210c      	movs	r1, #12
 80003ac:	fa01 f202 	lsl.w	r2, r1, r2
 80003b0:	431a      	orrs	r2, r3
 80003b2:	693b      	ldr	r3, [r7, #16]
 80003b4:	601a      	str	r2, [r3, #0]
 80003b6:	e004      	b.n	80003c2 <GPIO_Init+0xbe>
		}
		else
		{
			Local_ERROR = ERR;
 80003b8:	2301      	movs	r3, #1
 80003ba:	75fb      	strb	r3, [r7, #23]
 80003bc:	e001      	b.n	80003c2 <GPIO_Init+0xbe>
		}
	}
	else
	{
		Local_ERROR = ERR;
 80003be:	2301      	movs	r3, #1
 80003c0:	75fb      	strb	r3, [r7, #23]
	}
	return Local_ERROR;
 80003c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80003c4:	4618      	mov	r0, r3
 80003c6:	371c      	adds	r7, #28
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bc80      	pop	{r7}
 80003cc:	4770      	bx	lr

080003ce <GPIO_SetPinValue>:


STD_ERR GPIO_SetPinValue(volatile void * Port, u32 Pin, u32 Value)
{
 80003ce:	b480      	push	{r7}
 80003d0:	b087      	sub	sp, #28
 80003d2:	af00      	add	r7, sp, #0
 80003d4:	60f8      	str	r0, [r7, #12]
 80003d6:	60b9      	str	r1, [r7, #8]
 80003d8:	607a      	str	r2, [r7, #4]
	STD_ERR Local_ERROR = ERR;
 80003da:	2301      	movs	r3, #1
 80003dc:	75fb      	strb	r3, [r7, #23]
	if(Pin <= GPIO_PIN_15)
 80003de:	68bb      	ldr	r3, [r7, #8]
 80003e0:	2b0f      	cmp	r3, #15
 80003e2:	d825      	bhi.n	8000430 <GPIO_SetPinValue+0x62>
	{
		if(Value == HIGH)
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	2b01      	cmp	r3, #1
 80003e8:	d109      	bne.n	80003fe <GPIO_SetPinValue+0x30>
		{
			SET_BIT((((GPIO_TypeDef *)Port)->ODR), Pin);
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	68db      	ldr	r3, [r3, #12]
 80003ee:	2101      	movs	r1, #1
 80003f0:	68ba      	ldr	r2, [r7, #8]
 80003f2:	fa01 f202 	lsl.w	r2, r1, r2
 80003f6:	431a      	orrs	r2, r3
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	60da      	str	r2, [r3, #12]
 80003fc:	e00c      	b.n	8000418 <GPIO_SetPinValue+0x4a>
		}
		else if(Value == LOW)
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d109      	bne.n	8000418 <GPIO_SetPinValue+0x4a>
		{
			CLR_BIT((((GPIO_TypeDef *)Port)->ODR), Pin);
 8000404:	68fb      	ldr	r3, [r7, #12]
 8000406:	68db      	ldr	r3, [r3, #12]
 8000408:	2101      	movs	r1, #1
 800040a:	68ba      	ldr	r2, [r7, #8]
 800040c:	fa01 f202 	lsl.w	r2, r1, r2
 8000410:	43d2      	mvns	r2, r2
 8000412:	401a      	ands	r2, r3
 8000414:	68fb      	ldr	r3, [r7, #12]
 8000416:	60da      	str	r2, [r3, #12]
		else
		{
			/* Do Nothing */
		}

		if(GET_BIT((((GPIO_TypeDef *)Port)->ODR), Pin) == Value)
 8000418:	68fb      	ldr	r3, [r7, #12]
 800041a:	68da      	ldr	r2, [r3, #12]
 800041c:	68bb      	ldr	r3, [r7, #8]
 800041e:	fa22 f303 	lsr.w	r3, r2, r3
 8000422:	f003 0201 	and.w	r2, r3, #1
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	429a      	cmp	r2, r3
 800042a:	d101      	bne.n	8000430 <GPIO_SetPinValue+0x62>
		{
			Local_ERROR = NO_ERR;
 800042c:	2300      	movs	r3, #0
 800042e:	75fb      	strb	r3, [r7, #23]
	}
	else
	{
		/* Do Nothing */
	}
	return Local_ERROR;
 8000430:	7dfb      	ldrb	r3, [r7, #23]

}
 8000432:	4618      	mov	r0, r3
 8000434:	371c      	adds	r7, #28
 8000436:	46bd      	mov	sp, r7
 8000438:	bc80      	pop	{r7}
 800043a:	4770      	bx	lr

0800043c <NVIC_SetDevicePriority>:
}


/* Set Interrupt Priority */
void NVIC_SetDevicePriority(s32 IRQn, u32 priority)
{
 800043c:	b480      	push	{r7}
 800043e:	b083      	sub	sp, #12
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
 8000444:	6039      	str	r1, [r7, #0]
  if(IRQn < 0)
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	2b00      	cmp	r3, #0
 800044a:	db08      	blt.n	800045e <NVIC_SetDevicePriority+0x22>

  }
  else
  {
	  /* set Priority for device specific Interrupts  */
    NVIC->IP[(u32)(IRQn)] = ((priority << (8 - NVIC_PRIO_BITS)) & 0xff);
 800044c:	4906      	ldr	r1, [pc, #24]	; (8000468 <NVIC_SetDevicePriority+0x2c>)
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	683a      	ldr	r2, [r7, #0]
 8000452:	b2d2      	uxtb	r2, r2
 8000454:	0112      	lsls	r2, r2, #4
 8000456:	b2d2      	uxtb	r2, r2
 8000458:	440b      	add	r3, r1
 800045a:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
}
 800045e:	bf00      	nop
 8000460:	370c      	adds	r7, #12
 8000462:	46bd      	mov	sp, r7
 8000464:	bc80      	pop	{r7}
 8000466:	4770      	bx	lr
 8000468:	e000e100 	.word	0xe000e100

0800046c <RCCSystemInit>:
#include "RCC_config.h"
#include "RCC_interface.h"


void RCCSystemInit (void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (u32)0x00000001;
 8000470:	4a17      	ldr	r2, [pc, #92]	; (80004d0 <RCCSystemInit+0x64>)
 8000472:	4b17      	ldr	r3, [pc, #92]	; (80004d0 <RCCSystemInit+0x64>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	f043 0301 	orr.w	r3, r3, #1
 800047a:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while(RCC_CR_HSIRDY != (RCC_CR_HSIRDY & RCC->CR))
 800047c:	bf00      	nop
 800047e:	4b14      	ldr	r3, [pc, #80]	; (80004d0 <RCCSystemInit+0x64>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	f003 0302 	and.w	r3, r3, #2
 8000486:	2b02      	cmp	r3, #2
 8000488:	d1f9      	bne.n	800047e <RCCSystemInit+0x12>
  {
	/* Waiting */
  }

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
  RCC->CFGR &= (u32)0xF8FF0000;
 800048a:	4911      	ldr	r1, [pc, #68]	; (80004d0 <RCCSystemInit+0x64>)
 800048c:	4b10      	ldr	r3, [pc, #64]	; (80004d0 <RCCSystemInit+0x64>)
 800048e:	685a      	ldr	r2, [r3, #4]
 8000490:	4b10      	ldr	r3, [pc, #64]	; (80004d4 <RCCSystemInit+0x68>)
 8000492:	4013      	ands	r3, r2
 8000494:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (u32)0xFEF6FFFF;
 8000496:	4a0e      	ldr	r2, [pc, #56]	; (80004d0 <RCCSystemInit+0x64>)
 8000498:	4b0d      	ldr	r3, [pc, #52]	; (80004d0 <RCCSystemInit+0x64>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80004a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80004a4:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (u32)0xFFFBFFFF;
 80004a6:	4a0a      	ldr	r2, [pc, #40]	; (80004d0 <RCCSystemInit+0x64>)
 80004a8:	4b09      	ldr	r3, [pc, #36]	; (80004d0 <RCCSystemInit+0x64>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80004b0:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (u32)0xFF80FFFF;
 80004b2:	4a07      	ldr	r2, [pc, #28]	; (80004d0 <RCCSystemInit+0x64>)
 80004b4:	4b06      	ldr	r3, [pc, #24]	; (80004d0 <RCCSystemInit+0x64>)
 80004b6:	685b      	ldr	r3, [r3, #4]
 80004b8:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80004bc:	6053      	str	r3, [r2, #4]

  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 80004be:	4b04      	ldr	r3, [pc, #16]	; (80004d0 <RCCSystemInit+0x64>)
 80004c0:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80004c4:	609a      	str	r2, [r3, #8]
}
 80004c6:	bf00      	nop
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bc80      	pop	{r7}
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop
 80004d0:	40021000 	.word	0x40021000
 80004d4:	f8ff0000 	.word	0xf8ff0000

080004d8 <RCC_StartHSE>:

STD_ERR RCC_StartHSE(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
	__IO u32 Local_StartUpCounter = 0;
 80004de:	2300      	movs	r3, #0
 80004e0:	607b      	str	r3, [r7, #4]
	__IO STD_ERR Local_Error = ERR;
 80004e2:	2301      	movs	r3, #1
 80004e4:	70fb      	strb	r3, [r7, #3]

	  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
	  /* Enable HSE */
	  RCC->CR |= ((u32)RCC_CR_HSEON);
 80004e6:	4a11      	ldr	r2, [pc, #68]	; (800052c <RCC_StartHSE+0x54>)
 80004e8:	4b10      	ldr	r3, [pc, #64]	; (800052c <RCC_StartHSE+0x54>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80004f0:	6013      	str	r3, [r2, #0]

	  /* Wait till HSE is ready and if Time out is reached exit */
	  do
	  {
	    Local_StartUpCounter++;
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	3301      	adds	r3, #1
 80004f6:	607b      	str	r3, [r7, #4]
	  } while(((RCC->CR & RCC_CR_HSERDY) == 0) && (Local_StartUpCounter != HSE_STARTUP_TIMEOUT));
 80004f8:	4b0c      	ldr	r3, [pc, #48]	; (800052c <RCC_StartHSE+0x54>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000500:	2b00      	cmp	r3, #0
 8000502:	d103      	bne.n	800050c <RCC_StartHSE+0x34>
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800050a:	d1f2      	bne.n	80004f2 <RCC_StartHSE+0x1a>

	  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800050c:	4b07      	ldr	r3, [pc, #28]	; (800052c <RCC_StartHSE+0x54>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000514:	2b00      	cmp	r3, #0
 8000516:	d001      	beq.n	800051c <RCC_StartHSE+0x44>
	  {
		  Local_Error = NO_ERR;
 8000518:	2300      	movs	r3, #0
 800051a:	70fb      	strb	r3, [r7, #3]
	  else
	  {
		  /* Do Nothing */
	  }

	  return Local_Error;
 800051c:	78fb      	ldrb	r3, [r7, #3]
 800051e:	b2db      	uxtb	r3, r3
}
 8000520:	4618      	mov	r0, r3
 8000522:	370c      	adds	r7, #12
 8000524:	46bd      	mov	sp, r7
 8000526:	bc80      	pop	{r7}
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	40021000 	.word	0x40021000

08000530 <RCC_SetSystemClock72MHz>:

void RCC_SetSystemClock72MHz(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
	/* HCLK = SYSCLK */
	RCC->CFGR |= (u32)RCC_CFGR_HPRE_DIV1;
 8000534:	4a1e      	ldr	r2, [pc, #120]	; (80005b0 <RCC_SetSystemClock72MHz+0x80>)
 8000536:	4b1e      	ldr	r3, [pc, #120]	; (80005b0 <RCC_SetSystemClock72MHz+0x80>)
 8000538:	685b      	ldr	r3, [r3, #4]
 800053a:	6053      	str	r3, [r2, #4]

	/* PCLK2 = HCLK */
	RCC->CFGR |= (u32)RCC_CFGR_PPRE2_DIV1;
 800053c:	4a1c      	ldr	r2, [pc, #112]	; (80005b0 <RCC_SetSystemClock72MHz+0x80>)
 800053e:	4b1c      	ldr	r3, [pc, #112]	; (80005b0 <RCC_SetSystemClock72MHz+0x80>)
 8000540:	685b      	ldr	r3, [r3, #4]
 8000542:	6053      	str	r3, [r2, #4]

	/* PCLK1 = HCLK */
	RCC->CFGR |= (u32)RCC_CFGR_PPRE1_DIV2;
 8000544:	4a1a      	ldr	r2, [pc, #104]	; (80005b0 <RCC_SetSystemClock72MHz+0x80>)
 8000546:	4b1a      	ldr	r3, [pc, #104]	; (80005b0 <RCC_SetSystemClock72MHz+0x80>)
 8000548:	685b      	ldr	r3, [r3, #4]
 800054a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800054e:	6053      	str	r3, [r2, #4]

	/*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
	RCC->CFGR &= (u32)((u32)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8000550:	4a17      	ldr	r2, [pc, #92]	; (80005b0 <RCC_SetSystemClock72MHz+0x80>)
 8000552:	4b17      	ldr	r3, [pc, #92]	; (80005b0 <RCC_SetSystemClock72MHz+0x80>)
 8000554:	685b      	ldr	r3, [r3, #4]
 8000556:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800055a:	6053      	str	r3, [r2, #4]
										RCC_CFGR_PLLMULL));
	//RCC->CFGR |= (u32)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);

	//////////////////////////////////////////////////////////////////////////
	// Select HSI 8MHz to get 36MHz SYSCLK
	RCC->CFGR |= (u32)(RCC_CFGR_PLLMULL9);
 800055c:	4a14      	ldr	r2, [pc, #80]	; (80005b0 <RCC_SetSystemClock72MHz+0x80>)
 800055e:	4b14      	ldr	r3, [pc, #80]	; (80005b0 <RCC_SetSystemClock72MHz+0x80>)
 8000560:	685b      	ldr	r3, [r3, #4]
 8000562:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 8000566:	6053      	str	r3, [r2, #4]
	//////////////////////////////////////////////////////////////////////////


	/* Enable PLL */
	RCC->CR |= RCC_CR_PLLON;
 8000568:	4a11      	ldr	r2, [pc, #68]	; (80005b0 <RCC_SetSystemClock72MHz+0x80>)
 800056a:	4b11      	ldr	r3, [pc, #68]	; (80005b0 <RCC_SetSystemClock72MHz+0x80>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000572:	6013      	str	r3, [r2, #0]

	/* Wait till PLL is ready */
	while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000574:	bf00      	nop
 8000576:	4b0e      	ldr	r3, [pc, #56]	; (80005b0 <RCC_SetSystemClock72MHz+0x80>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800057e:	2b00      	cmp	r3, #0
 8000580:	d0f9      	beq.n	8000576 <RCC_SetSystemClock72MHz+0x46>
	{
	}

	/* Select PLL as system clock source */
	RCC->CFGR &= (u32)((u32)~(RCC_CFGR_SW));
 8000582:	4a0b      	ldr	r2, [pc, #44]	; (80005b0 <RCC_SetSystemClock72MHz+0x80>)
 8000584:	4b0a      	ldr	r3, [pc, #40]	; (80005b0 <RCC_SetSystemClock72MHz+0x80>)
 8000586:	685b      	ldr	r3, [r3, #4]
 8000588:	f023 0303 	bic.w	r3, r3, #3
 800058c:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= (u32)RCC_CFGR_SW_PLL;
 800058e:	4a08      	ldr	r2, [pc, #32]	; (80005b0 <RCC_SetSystemClock72MHz+0x80>)
 8000590:	4b07      	ldr	r3, [pc, #28]	; (80005b0 <RCC_SetSystemClock72MHz+0x80>)
 8000592:	685b      	ldr	r3, [r3, #4]
 8000594:	f043 0302 	orr.w	r3, r3, #2
 8000598:	6053      	str	r3, [r2, #4]

	/* Wait till PLL is used as system clock source */
	while ((RCC->CFGR & (u32)RCC_CFGR_SWS) != (u32)0x08)
 800059a:	bf00      	nop
 800059c:	4b04      	ldr	r3, [pc, #16]	; (80005b0 <RCC_SetSystemClock72MHz+0x80>)
 800059e:	685b      	ldr	r3, [r3, #4]
 80005a0:	f003 030c 	and.w	r3, r3, #12
 80005a4:	2b08      	cmp	r3, #8
 80005a6:	d1f9      	bne.n	800059c <RCC_SetSystemClock72MHz+0x6c>
	{
	}

}
 80005a8:	bf00      	nop
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bc80      	pop	{r7}
 80005ae:	4770      	bx	lr
 80005b0:	40021000 	.word	0x40021000

080005b4 <RCC_EnableGPIOC>:
{
	RCC->APB2ENR	&= ~RCC_APB2ENR_IOPBEN;
}

void RCC_EnableGPIOC(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
	RCC->APB2ENR	|= RCC_APB2ENR_IOPCEN;
 80005b8:	4a04      	ldr	r2, [pc, #16]	; (80005cc <RCC_EnableGPIOC+0x18>)
 80005ba:	4b04      	ldr	r3, [pc, #16]	; (80005cc <RCC_EnableGPIOC+0x18>)
 80005bc:	699b      	ldr	r3, [r3, #24]
 80005be:	f043 0310 	orr.w	r3, r3, #16
 80005c2:	6193      	str	r3, [r2, #24]
}
 80005c4:	bf00      	nop
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bc80      	pop	{r7}
 80005ca:	4770      	bx	lr
 80005cc:	40021000 	.word	0x40021000

080005d0 <SCB_SetVectorTableOffset>:
#include <MCAL/SCB/SCB_interface.h>
#include <MCAL/SCB/SCB_private.h>

/* Set Offset of Vector Table */
void SCB_SetVectorTableOffset(u32 Address)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
	__ASM("DMB");
 80005d8:	f3bf 8f5f 	dmb	sy
	SCB->VTOR =	Address;
 80005dc:	4a04      	ldr	r2, [pc, #16]	; (80005f0 <SCB_SetVectorTableOffset+0x20>)
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	6093      	str	r3, [r2, #8]
	__ASM("DSB");
 80005e2:	f3bf 8f4f 	dsb	sy
}
 80005e6:	bf00      	nop
 80005e8:	370c      	adds	r7, #12
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bc80      	pop	{r7}
 80005ee:	4770      	bx	lr
 80005f0:	e000ed00 	.word	0xe000ed00

080005f4 <SCB_SetSystemPriority>:
  SCB->AIRCR =  reg_value;
}

/* Set Interrupt Priority */
void SCB_SetSystemPriority(s32 IRQn, u32 priority)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
 80005fc:	6039      	str	r1, [r7, #0]
  if(IRQn < 0)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	2b00      	cmp	r3, #0
 8000602:	da0a      	bge.n	800061a <SCB_SetSystemPriority+0x26>
  {
	/* set Priority for Cortex-M  System Interrupts */
    SCB->SHP[((u32)(IRQn) & 0xF)-4] = ((priority << (8 - NVIC_PRIO_BITS)) & 0xff);
 8000604:	4907      	ldr	r1, [pc, #28]	; (8000624 <SCB_SetSystemPriority+0x30>)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	f003 030f 	and.w	r3, r3, #15
 800060c:	3b04      	subs	r3, #4
 800060e:	683a      	ldr	r2, [r7, #0]
 8000610:	b2d2      	uxtb	r2, r2
 8000612:	0112      	lsls	r2, r2, #4
 8000614:	b2d2      	uxtb	r2, r2
 8000616:	440b      	add	r3, r1
 8000618:	761a      	strb	r2, [r3, #24]
  }
  else
  {

  }
}
 800061a:	bf00      	nop
 800061c:	370c      	adds	r7, #12
 800061e:	46bd      	mov	sp, r7
 8000620:	bc80      	pop	{r7}
 8000622:	4770      	bx	lr
 8000624:	e000ed00 	.word	0xe000ed00

08000628 <SCB_PendSVSetPending>:
    return ~0;
  }
}

void SCB_PendSVSetPending(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
	SCB->ICSR |= SCB_ICSR_PENDSVSET;
 800062c:	4a04      	ldr	r2, [pc, #16]	; (8000640 <SCB_PendSVSetPending+0x18>)
 800062e:	4b04      	ldr	r3, [pc, #16]	; (8000640 <SCB_PendSVSetPending+0x18>)
 8000630:	685b      	ldr	r3, [r3, #4]
 8000632:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000636:	6053      	str	r3, [r2, #4]
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	bc80      	pop	{r7}
 800063e:	4770      	bx	lr
 8000640:	e000ed00 	.word	0xe000ed00

08000644 <SysTick_Config>:
#include <MCAL/SysTick/SysTick_private.h>
#include <MCAL/SysTick/SysTick_config.h>
#include <MCAL/SysTick/SysTick_interface.h>

STD_ERR SysTick_Config(u32 ticks)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD)  return (ERR);            /* Reload value impossible */
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000652:	d301      	bcc.n	8000658 <SysTick_Config+0x14>
 8000654:	2301      	movs	r3, #1
 8000656:	e00c      	b.n	8000672 <SysTick_Config+0x2e>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD) - 1;      /* set reload register */
 8000658:	4a08      	ldr	r2, [pc, #32]	; (800067c <SysTick_Config+0x38>)
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000660:	3b01      	subs	r3, #1
 8000662:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000664:	4b05      	ldr	r3, [pc, #20]	; (800067c <SysTick_Config+0x38>)
 8000666:	2200      	movs	r2, #0
 8000668:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE |
 800066a:	4b04      	ldr	r3, [pc, #16]	; (800067c <SysTick_Config+0x38>)
 800066c:	2207      	movs	r2, #7
 800066e:	601a      	str	r2, [r3, #0]
		  	  	   SysTick_CTRL_TICKINT   |
				   SysTick_CTRL_ENABLE;                    /* Enable SysTick IRQ and SysTick Timer */
  return NO_ERR;                                                  /* Function successful */
 8000670:	2300      	movs	r3, #0
}
 8000672:	4618      	mov	r0, r3
 8000674:	370c      	adds	r7, #12
 8000676:	46bd      	mov	sp, r7
 8000678:	bc80      	pop	{r7}
 800067a:	4770      	bx	lr
 800067c:	e000e010 	.word	0xe000e010

08000680 <USART1_IRQHandler>:
{
	USART1_func = Handler;
}

void USART1_IRQHandler(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
	u8 flags = 0;
 8000686:	2300      	movs	r3, #0
 8000688:	71fb      	strb	r3, [r7, #7]
	if(USART1->SR & USART_SR_RXNE)
 800068a:	4b17      	ldr	r3, [pc, #92]	; (80006e8 <USART1_IRQHandler+0x68>)
 800068c:	881b      	ldrh	r3, [r3, #0]
 800068e:	b29b      	uxth	r3, r3
 8000690:	f003 0320 	and.w	r3, r3, #32
 8000694:	2b00      	cmp	r3, #0
 8000696:	d003      	beq.n	80006a0 <USART1_IRQHandler+0x20>
	{
		flags |= UART_RXNE_FLAG;
 8000698:	79fb      	ldrb	r3, [r7, #7]
 800069a:	f043 0301 	orr.w	r3, r3, #1
 800069e:	71fb      	strb	r3, [r7, #7]
	}
	if(USART1->SR & USART_SR_TC)
 80006a0:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <USART1_IRQHandler+0x68>)
 80006a2:	881b      	ldrh	r3, [r3, #0]
 80006a4:	b29b      	uxth	r3, r3
 80006a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d003      	beq.n	80006b6 <USART1_IRQHandler+0x36>
	{
		flags |= UART_TC_FLAG;
 80006ae:	79fb      	ldrb	r3, [r7, #7]
 80006b0:	f043 0302 	orr.w	r3, r3, #2
 80006b4:	71fb      	strb	r3, [r7, #7]
	}
	if(USART1->SR & USART_SR_PE)
 80006b6:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <USART1_IRQHandler+0x68>)
 80006b8:	881b      	ldrh	r3, [r3, #0]
 80006ba:	b29b      	uxth	r3, r3
 80006bc:	f003 0301 	and.w	r3, r3, #1
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d003      	beq.n	80006cc <USART1_IRQHandler+0x4c>
	{
		flags |= UART_PE_FLAG;
 80006c4:	79fb      	ldrb	r3, [r7, #7]
 80006c6:	f043 0304 	orr.w	r3, r3, #4
 80006ca:	71fb      	strb	r3, [r7, #7]
	}
	if(USART1_func)
 80006cc:	4b07      	ldr	r3, [pc, #28]	; (80006ec <USART1_IRQHandler+0x6c>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d004      	beq.n	80006de <USART1_IRQHandler+0x5e>
	{
		USART1_func(flags);
 80006d4:	4b05      	ldr	r3, [pc, #20]	; (80006ec <USART1_IRQHandler+0x6c>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	79fa      	ldrb	r2, [r7, #7]
 80006da:	4610      	mov	r0, r2
 80006dc:	4798      	blx	r3
	}
}
 80006de:	bf00      	nop
 80006e0:	3708      	adds	r7, #8
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40013800 	.word	0x40013800
 80006ec:	2000017c 	.word	0x2000017c

080006f0 <SystemInit>:
  * Initialize the Embedded Flash Interface, the PLL and update the
  * SystemCoreClock variable.
  */

void SystemInit (void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
	RCCSystemInit();
 80006f4:	f7ff feba 	bl	800046c <RCCSystemInit>

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
#ifdef SYSCLK_FREQ_72MHz
	SetSysClockTo72();
 80006f8:	f000 f806 	bl	8000708 <SetSysClockTo72>
#endif

	SCB_SetVectorTableOffset(FLASH_BASE | VECT_TAB_OFFSET); /* Vector Table Relocation in Internal FLASH. */
 80006fc:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8000700:	f7ff ff66 	bl	80005d0 <SCB_SetVectorTableOffset>
}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}

08000708 <SetSysClockTo72>:
/**
  * Sets System clock frequency to 72MHz and configure HCLK, PCLK2
  * and PCLK1 prescalers.
  */
static void SetSysClockTo72(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
  __IO STD_ERR HSEStatus = ERR;
 800070e:	2301      	movs	r3, #1
 8000710:	71fb      	strb	r3, [r7, #7]

  HSEStatus = RCC_StartHSE();
 8000712:	f7ff fee1 	bl	80004d8 <RCC_StartHSE>
 8000716:	4603      	mov	r3, r0
 8000718:	71fb      	strb	r3, [r7, #7]

  if (HSEStatus == NO_ERR)
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	b2db      	uxtb	r3, r3
 800071e:	2b00      	cmp	r3, #0
 8000720:	d106      	bne.n	8000730 <SetSysClockTo72+0x28>
  {
	Flash_EnablePrefetchBuffer();
 8000722:	f7ff fdc1 	bl	80002a8 <Flash_EnablePrefetchBuffer>
	Flash_SetLatency(FLASH_LATENCY_2);
 8000726:	2002      	movs	r0, #2
 8000728:	f7ff fdcc 	bl	80002c4 <Flash_SetLatency>
	RCC_SetSystemClock72MHz();
 800072c:	f7ff ff00 	bl	8000530 <RCC_SetSystemClock72MHz>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }
}
 8000730:	bf00      	nop
 8000732:	3708      	adds	r7, #8
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}

08000738 <PendSV_Handler>:
{
	 __ASM volatile ("msr msp, %0" : : "r" (sp));
}

__attribute__( ( always_inline ) ) static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
__attribute__( ( always_inline ) ) static __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }
 8000738:	b672      	cpsid	i
/* Private functions */

void PendSV_Handler(void)
{
	__disable_irq();
	if (OS_curr != (OSThread *)0)
 800073a:	4b0d      	ldr	r3, [pc, #52]	; (8000770 <PendSV_Handler+0x38>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d007      	beq.n	8000752 <PendSV_Handler+0x1a>
__attribute__( ( always_inline ) ) static __INLINE void __ISB()                      { __ASM volatile ("isb"); }
__attribute__( ( always_inline ) ) static __INLINE void __DSB()                      { __ASM volatile ("dsb"); }
__attribute__( ( always_inline ) ) static __INLINE void __DMB()                      { __ASM volatile ("dmb"); }
__attribute__( ( always_inline ) ) static __INLINE void __CLREX()                    { __ASM volatile ("clrex"); }

__attribute__( ( always_inline ) ) static __INLINE void pushR4toR11()                { __ASM volatile ("push {r4-r11}"); }
 8000742:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	{
		pushR4toR11();
		OS_curr->sp = getSP();
 8000746:	4b0a      	ldr	r3, [pc, #40]	; (8000770 <PendSV_Handler+0x38>)
 8000748:	681b      	ldr	r3, [r3, #0]
    __ASM volatile ("mov %0, sp" : "=r"(sp));
 800074a:	466a      	mov	r2, sp
 800074c:	4614      	mov	r4, r2
    return sp;
 800074e:	4622      	mov	r2, r4
 8000750:	601a      	str	r2, [r3, #0]
	}
	OS_curr = OS_next;
 8000752:	4b08      	ldr	r3, [pc, #32]	; (8000774 <PendSV_Handler+0x3c>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	4a06      	ldr	r2, [pc, #24]	; (8000770 <PendSV_Handler+0x38>)
 8000758:	6013      	str	r3, [r2, #0]
	setSP(OS_curr->sp);
 800075a:	4b05      	ldr	r3, [pc, #20]	; (8000770 <PendSV_Handler+0x38>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	461c      	mov	r4, r3
	 __ASM volatile ("msr msp, %0" : : "r" (sp));
 8000762:	f384 8808 	msr	MSP, r4
__attribute__( ( always_inline ) ) static __INLINE void popR4toR11()                { __ASM volatile ("pop {r4-r11}"); }
 8000766:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
__attribute__( ( always_inline ) ) static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
 800076a:	b662      	cpsie	i
__attribute__( ( always_inline ) ) static __INLINE void __BXLR()                { __ASM volatile ("bx lr"); }
 800076c:	4770      	bx	lr
	popR4toR11();
	__enable_irq();
	__BXLR();
}
 800076e:	bf00      	nop
 8000770:	20000194 	.word	0x20000194
 8000774:	20000190 	.word	0x20000190

08000778 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
	static u8 schedTicks = 0;
	OS_tick();
 800077c:	f000 f8c0 	bl	8000900 <OS_tick>

	if(schedTicks >= OS_CFG_SHEDTICKS)
 8000780:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <SysTick_Handler+0x30>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	2b02      	cmp	r3, #2
 8000786:	d907      	bls.n	8000798 <SysTick_Handler+0x20>
	{
		schedTicks = 0;
 8000788:	4b07      	ldr	r3, [pc, #28]	; (80007a8 <SysTick_Handler+0x30>)
 800078a:	2200      	movs	r2, #0
 800078c:	701a      	strb	r2, [r3, #0]
__attribute__( ( always_inline ) ) static __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }
 800078e:	b672      	cpsid	i
		__disable_irq();
		OS_scheduler();
 8000790:	f000 f85c 	bl	800084c <OS_scheduler>
__attribute__( ( always_inline ) ) static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
 8000794:	b662      	cpsie	i
	}
	else
	{
		schedTicks++;
	}
}
 8000796:	e005      	b.n	80007a4 <SysTick_Handler+0x2c>
		schedTicks++;
 8000798:	4b03      	ldr	r3, [pc, #12]	; (80007a8 <SysTick_Handler+0x30>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	3301      	adds	r3, #1
 800079e:	b2da      	uxtb	r2, r3
 80007a0:	4b01      	ldr	r3, [pc, #4]	; (80007a8 <SysTick_Handler+0x30>)
 80007a2:	701a      	strb	r2, [r3, #0]
}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	2000001c 	.word	0x2000001c

080007ac <idleThread_Handler>:
**  Abstract: Idle Thread
**
**===========================================================================
*/

void idleThread_Handler(void) {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
    while (1) {
        OS_onIdle();
 80007b0:	f000 f816 	bl	80007e0 <OS_onIdle>
 80007b4:	e7fc      	b.n	80007b0 <idleThread_Handler+0x4>
	...

080007b8 <createIdleThread>:
    }
}

void createIdleThread(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af02      	add	r7, sp, #8
	/* start idleThread thread */
	OSThread_Create(&idleThread,
 80007be:	23a0      	movs	r3, #160	; 0xa0
 80007c0:	9300      	str	r3, [sp, #0]
 80007c2:	4b04      	ldr	r3, [pc, #16]	; (80007d4 <createIdleThread+0x1c>)
 80007c4:	4a04      	ldr	r2, [pc, #16]	; (80007d8 <createIdleThread+0x20>)
 80007c6:	2100      	movs	r1, #0
 80007c8:	4804      	ldr	r0, [pc, #16]	; (80007dc <createIdleThread+0x24>)
 80007ca:	f000 f913 	bl	80009f4 <OSThread_Create>
				   0U, /* idle thread priority */
				   &idleThread_Handler,
				   stack_idleThread, sizeof(stack_idleThread));
}
 80007ce:	bf00      	nop
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	20000228 	.word	0x20000228
 80007d8:	080007ad 	.word	0x080007ad
 80007dc:	2000021c 	.word	0x2000021c

080007e0 <OS_onIdle>:

__attribute__((weak)) void OS_onIdle(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
__attribute__( ( always_inline ) ) static __INLINE void __WFI()                      { __ASM volatile ("wfi"); }
 80007e4:	bf30      	wfi
	/* Wait for interrupts */
	__WFI();
}
 80007e6:	bf00      	nop
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bc80      	pop	{r7}
 80007ec:	4770      	bx	lr
	...

080007f0 <OS_init>:
**
**===========================================================================
*/

void OS_init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
	OS_existSet = 0x00000000U;
 80007f4:	4b0f      	ldr	r3, [pc, #60]	; (8000834 <OS_init+0x44>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
	OS_readySet = 0x00000000U;
 80007fa:	4b0f      	ldr	r3, [pc, #60]	; (8000838 <OS_init+0x48>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
	OS_delayedSet = 0x00000000U;
 8000800:	4b0e      	ldr	r3, [pc, #56]	; (800083c <OS_init+0x4c>)
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
	OS_blockedSet = 0x00000000U;
 8000806:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <OS_init+0x50>)
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]

    /* set the PendSV interrupt priority to the lowest level 0xFF */
	Interrupts_SetPriority(PendSV_IRQn, 15);
 800080c:	210f      	movs	r1, #15
 800080e:	f06f 0001 	mvn.w	r0, #1
 8000812:	f7ff fd2d 	bl	8000270 <Interrupts_SetPriority>
	Interrupts_SetPriority(SysTick_IRQn, 14);
 8000816:	210e      	movs	r1, #14
 8000818:	f04f 30ff 	mov.w	r0, #4294967295
 800081c:	f7ff fd28 	bl	8000270 <Interrupts_SetPriority>

    createIdleThread();
 8000820:	f7ff ffca 	bl	80007b8 <createIdleThread>

    OS_currThreadMask = 0x00000001U;
 8000824:	4b07      	ldr	r3, [pc, #28]	; (8000844 <OS_init+0x54>)
 8000826:	2201      	movs	r2, #1
 8000828:	601a      	str	r2, [r3, #0]
    OS_curr = (OSThread *)0;
 800082a:	4b07      	ldr	r3, [pc, #28]	; (8000848 <OS_init+0x58>)
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
}
 8000830:	bf00      	nop
 8000832:	bd80      	pop	{r7, pc}
 8000834:	20000180 	.word	0x20000180
 8000838:	2000018c 	.word	0x2000018c
 800083c:	20000218 	.word	0x20000218
 8000840:	20000188 	.word	0x20000188
 8000844:	20000184 	.word	0x20000184
 8000848:	20000194 	.word	0x20000194

0800084c <OS_scheduler>:

void OS_scheduler(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af00      	add	r7, sp, #0
    /* OS_next = ... */
	if(OS_readySet > 0x00000001U)
 8000852:	4b20      	ldr	r3, [pc, #128]	; (80008d4 <OS_scheduler+0x88>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	2b01      	cmp	r3, #1
 8000858:	d91d      	bls.n	8000896 <OS_scheduler+0x4a>
	{
		OS_currThreadMask = (OS_currThreadMask - 1) & OS_readySet & (0xFFFFFFFEU);
 800085a:	4b1f      	ldr	r3, [pc, #124]	; (80008d8 <OS_scheduler+0x8c>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	1e5a      	subs	r2, r3, #1
 8000860:	4b1c      	ldr	r3, [pc, #112]	; (80008d4 <OS_scheduler+0x88>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4013      	ands	r3, r2
 8000866:	f023 0301 	bic.w	r3, r3, #1
 800086a:	4a1b      	ldr	r2, [pc, #108]	; (80008d8 <OS_scheduler+0x8c>)
 800086c:	6013      	str	r3, [r2, #0]
		if(OS_currThreadMask == 0x00000000U)
 800086e:	4b1a      	ldr	r3, [pc, #104]	; (80008d8 <OS_scheduler+0x8c>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d113      	bne.n	800089e <OS_scheduler+0x52>
		{
			OS_currThreadMask = 1U << LOG2(OS_readySet);
 8000876:	4b17      	ldr	r3, [pc, #92]	; (80008d4 <OS_scheduler+0x88>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	fab3 f383 	clz	r3, r3
 8000882:	72fb      	strb	r3, [r7, #11]
  return(result);
 8000884:	7afb      	ldrb	r3, [r7, #11]
 8000886:	f1c3 031f 	rsb	r3, r3, #31
 800088a:	2201      	movs	r2, #1
 800088c:	fa02 f303 	lsl.w	r3, r2, r3
 8000890:	4a11      	ldr	r2, [pc, #68]	; (80008d8 <OS_scheduler+0x8c>)
 8000892:	6013      	str	r3, [r2, #0]
 8000894:	e003      	b.n	800089e <OS_scheduler+0x52>
		}
	}
	else
	{
		/* No threads available */
		OS_currThreadMask = OS_readySet;
 8000896:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <OS_scheduler+0x88>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4a0f      	ldr	r2, [pc, #60]	; (80008d8 <OS_scheduler+0x8c>)
 800089c:	6013      	str	r3, [r2, #0]
	}


    OS_next = OS_thread[LOG2(OS_currThreadMask)];
 800089e:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <OS_scheduler+0x8c>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	607b      	str	r3, [r7, #4]
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	fab3 f383 	clz	r3, r3
 80008aa:	70fb      	strb	r3, [r7, #3]
  return(result);
 80008ac:	78fb      	ldrb	r3, [r7, #3]
 80008ae:	f1c3 031f 	rsb	r3, r3, #31
 80008b2:	4a0a      	ldr	r2, [pc, #40]	; (80008dc <OS_scheduler+0x90>)
 80008b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008b8:	4a09      	ldr	r2, [pc, #36]	; (80008e0 <OS_scheduler+0x94>)
 80008ba:	6013      	str	r3, [r2, #0]

    /* trigger PendSV, if needed */
    if (OS_next != OS_curr) {
 80008bc:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <OS_scheduler+0x94>)
 80008be:	681a      	ldr	r2, [r3, #0]
 80008c0:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <OS_scheduler+0x98>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	429a      	cmp	r2, r3
 80008c6:	d001      	beq.n	80008cc <OS_scheduler+0x80>
        Interrupts_PendSVSetPending();
 80008c8:	f7ff fce7 	bl	800029a <Interrupts_PendSVSetPending>
    }
}
 80008cc:	bf00      	nop
 80008ce:	3710      	adds	r7, #16
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	2000018c 	.word	0x2000018c
 80008d8:	20000184 	.word	0x20000184
 80008dc:	20000198 	.word	0x20000198
 80008e0:	20000190 	.word	0x20000190
 80008e4:	20000194 	.word	0x20000194

080008e8 <OS_run>:

void OS_run(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
	SysTick_Config(OS_CFG_TICKCYCLES);
 80008ec:	4803      	ldr	r0, [pc, #12]	; (80008fc <OS_run+0x14>)
 80008ee:	f7ff fea9 	bl	8000644 <SysTick_Config>
__attribute__( ( always_inline ) ) static __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }
 80008f2:	b672      	cpsid	i

    __disable_irq();
    OS_scheduler();
 80008f4:	f7ff ffaa 	bl	800084c <OS_scheduler>
__attribute__( ( always_inline ) ) static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
 80008f8:	b662      	cpsie	i
    __enable_irq();

    /* Error occurred */
    while(1);
 80008fa:	e7fe      	b.n	80008fa <OS_run+0x12>
 80008fc:	00011940 	.word	0x00011940

08000900 <OS_tick>:
}

void OS_tick(void)
{
 8000900:	b480      	push	{r7}
 8000902:	b089      	sub	sp, #36	; 0x24
 8000904:	af00      	add	r7, sp, #0
	OSThread_Ctrl tempSet = OS_delayedSet;
 8000906:	4b20      	ldr	r3, [pc, #128]	; (8000988 <OS_tick+0x88>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	61fb      	str	r3, [r7, #28]
    while (tempSet != 0U) {
 800090c:	e034      	b.n	8000978 <OS_tick+0x78>
 800090e:	69fb      	ldr	r3, [r7, #28]
 8000910:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8000912:	68bb      	ldr	r3, [r7, #8]
 8000914:	fab3 f383 	clz	r3, r3
 8000918:	71fb      	strb	r3, [r7, #7]
  return(result);
 800091a:	79fb      	ldrb	r3, [r7, #7]
    	u32 bit = 1U << LOG2(tempSet);
 800091c:	f1c3 031f 	rsb	r3, r3, #31
 8000920:	2201      	movs	r2, #1
 8000922:	fa02 f303 	lsl.w	r3, r2, r3
 8000926:	61bb      	str	r3, [r7, #24]
 8000928:	69fb      	ldr	r3, [r7, #28]
 800092a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800092c:	693b      	ldr	r3, [r7, #16]
 800092e:	fab3 f383 	clz	r3, r3
 8000932:	73fb      	strb	r3, [r7, #15]
  return(result);
 8000934:	7bfb      	ldrb	r3, [r7, #15]
        OSThread *t = OS_thread[LOG2(tempSet)];
 8000936:	f1c3 031f 	rsb	r3, r3, #31
 800093a:	4a14      	ldr	r2, [pc, #80]	; (800098c <OS_tick+0x8c>)
 800093c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000940:	617b      	str	r3, [r7, #20]
        (t->timeout)--;
 8000942:	697b      	ldr	r3, [r7, #20]
 8000944:	685b      	ldr	r3, [r3, #4]
 8000946:	1e5a      	subs	r2, r3, #1
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	605a      	str	r2, [r3, #4]
        if (t->timeout == 0U) {
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	685b      	ldr	r3, [r3, #4]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d10c      	bne.n	800096e <OS_tick+0x6e>
            OS_readySet   |= bit;  /* insert to set */
 8000954:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <OS_tick+0x90>)
 8000956:	681a      	ldr	r2, [r3, #0]
 8000958:	69bb      	ldr	r3, [r7, #24]
 800095a:	4313      	orrs	r3, r2
 800095c:	4a0c      	ldr	r2, [pc, #48]	; (8000990 <OS_tick+0x90>)
 800095e:	6013      	str	r3, [r2, #0]
            OS_delayedSet &= ~bit; /* remove from set */
 8000960:	69bb      	ldr	r3, [r7, #24]
 8000962:	43da      	mvns	r2, r3
 8000964:	4b08      	ldr	r3, [pc, #32]	; (8000988 <OS_tick+0x88>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4013      	ands	r3, r2
 800096a:	4a07      	ldr	r2, [pc, #28]	; (8000988 <OS_tick+0x88>)
 800096c:	6013      	str	r3, [r2, #0]
        }
        tempSet &= ~bit; /* remove from working set */
 800096e:	69bb      	ldr	r3, [r7, #24]
 8000970:	43db      	mvns	r3, r3
 8000972:	69fa      	ldr	r2, [r7, #28]
 8000974:	4013      	ands	r3, r2
 8000976:	61fb      	str	r3, [r7, #28]
    while (tempSet != 0U) {
 8000978:	69fb      	ldr	r3, [r7, #28]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d1c7      	bne.n	800090e <OS_tick+0xe>
    }
}
 800097e:	bf00      	nop
 8000980:	3724      	adds	r7, #36	; 0x24
 8000982:	46bd      	mov	sp, r7
 8000984:	bc80      	pop	{r7}
 8000986:	4770      	bx	lr
 8000988:	20000218 	.word	0x20000218
 800098c:	20000198 	.word	0x20000198
 8000990:	2000018c 	.word	0x2000018c

08000994 <OSThread_Delay>:
**
**===========================================================================
*/

void OSThread_Delay(u32 ticks)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
__attribute__( ( always_inline ) ) static __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }
 800099c:	b672      	cpsid	i
    __disable_irq();
    /* never call OS_delay from the idleThread */
    if(OS_curr != OS_thread[0])
 800099e:	4b10      	ldr	r3, [pc, #64]	; (80009e0 <OSThread_Delay+0x4c>)
 80009a0:	681a      	ldr	r2, [r3, #0]
 80009a2:	4b10      	ldr	r3, [pc, #64]	; (80009e4 <OSThread_Delay+0x50>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	429a      	cmp	r2, r3
 80009a8:	d014      	beq.n	80009d4 <OSThread_Delay+0x40>
    {
		OS_curr->timeout = ticks;
 80009aa:	4b0e      	ldr	r3, [pc, #56]	; (80009e4 <OSThread_Delay+0x50>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	687a      	ldr	r2, [r7, #4]
 80009b0:	605a      	str	r2, [r3, #4]
		OS_readySet &= ~OS_currThreadMask;
 80009b2:	4b0d      	ldr	r3, [pc, #52]	; (80009e8 <OSThread_Delay+0x54>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	43da      	mvns	r2, r3
 80009b8:	4b0c      	ldr	r3, [pc, #48]	; (80009ec <OSThread_Delay+0x58>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4013      	ands	r3, r2
 80009be:	4a0b      	ldr	r2, [pc, #44]	; (80009ec <OSThread_Delay+0x58>)
 80009c0:	6013      	str	r3, [r2, #0]
		OS_delayedSet |= OS_currThreadMask;
 80009c2:	4b09      	ldr	r3, [pc, #36]	; (80009e8 <OSThread_Delay+0x54>)
 80009c4:	681a      	ldr	r2, [r3, #0]
 80009c6:	4b0a      	ldr	r3, [pc, #40]	; (80009f0 <OSThread_Delay+0x5c>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4313      	orrs	r3, r2
 80009cc:	4a08      	ldr	r2, [pc, #32]	; (80009f0 <OSThread_Delay+0x5c>)
 80009ce:	6013      	str	r3, [r2, #0]
		OS_scheduler();
 80009d0:	f7ff ff3c 	bl	800084c <OS_scheduler>
__attribute__( ( always_inline ) ) static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
 80009d4:	b662      	cpsie	i
    }
    __enable_irq();
}
 80009d6:	bf00      	nop
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	20000198 	.word	0x20000198
 80009e4:	20000194 	.word	0x20000194
 80009e8:	20000184 	.word	0x20000184
 80009ec:	2000018c 	.word	0x2000018c
 80009f0:	20000218 	.word	0x20000218

080009f4 <OSThread_Create>:
OSThread_Ctrl OSThread_Create(
    OSThread *me,
    u8 prio, /* thread priority */
    OSThreadHandler threadHandler,
    void *stack, u32 stkSize)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b08b      	sub	sp, #44	; 0x2c
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	60f8      	str	r0, [r7, #12]
 80009fc:	607a      	str	r2, [r7, #4]
 80009fe:	603b      	str	r3, [r7, #0]
 8000a00:	460b      	mov	r3, r1
 8000a02:	72fb      	strb	r3, [r7, #11]
    /* round down the stack top to the 8-byte boundary
    * NOTE: ARM Cortex-M stack grows down from hi -> low memory
    */
    u32 * sp = (u32 *)((((u32)stack + stkSize) / 8) * 8);
 8000a04:	683a      	ldr	r2, [r7, #0]
 8000a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a08:	4413      	add	r3, r2
 8000a0a:	f023 0307 	bic.w	r3, r3, #7
 8000a0e:	627b      	str	r3, [r7, #36]	; 0x24
    u32 * stk_limit;
    u32 bit;

    *(--sp) = (1U << 24);  /* xPSR */
 8000a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a12:	3b04      	subs	r3, #4
 8000a14:	627b      	str	r3, [r7, #36]	; 0x24
 8000a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a18:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000a1c:	601a      	str	r2, [r3, #0]
    *(--sp) = (u32)threadHandler; /* PC */
 8000a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a20:	3b04      	subs	r3, #4
 8000a22:	627b      	str	r3, [r7, #36]	; 0x24
 8000a24:	687a      	ldr	r2, [r7, #4]
 8000a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a28:	601a      	str	r2, [r3, #0]
    *(--sp) = 0xDEADBEEFU; /* LR  */
 8000a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a2c:	3b04      	subs	r3, #4
 8000a2e:	627b      	str	r3, [r7, #36]	; 0x24
 8000a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a32:	4a4d      	ldr	r2, [pc, #308]	; (8000b68 <OSThread_Create+0x174>)
 8000a34:	601a      	str	r2, [r3, #0]
    *(--sp) = 0xDEAD000CU; /* R12 */
 8000a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a38:	3b04      	subs	r3, #4
 8000a3a:	627b      	str	r3, [r7, #36]	; 0x24
 8000a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a3e:	4a4b      	ldr	r2, [pc, #300]	; (8000b6c <OSThread_Create+0x178>)
 8000a40:	601a      	str	r2, [r3, #0]
    *(--sp) = 0xDEAD0003U; /* R3  */
 8000a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a44:	3b04      	subs	r3, #4
 8000a46:	627b      	str	r3, [r7, #36]	; 0x24
 8000a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a4a:	4a49      	ldr	r2, [pc, #292]	; (8000b70 <OSThread_Create+0x17c>)
 8000a4c:	601a      	str	r2, [r3, #0]
    *(--sp) = 0xDEAD0002U; /* R2  */
 8000a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a50:	3b04      	subs	r3, #4
 8000a52:	627b      	str	r3, [r7, #36]	; 0x24
 8000a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a56:	4a47      	ldr	r2, [pc, #284]	; (8000b74 <OSThread_Create+0x180>)
 8000a58:	601a      	str	r2, [r3, #0]
    *(--sp) = 0xDEAD0001U; /* R1  */
 8000a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a5c:	3b04      	subs	r3, #4
 8000a5e:	627b      	str	r3, [r7, #36]	; 0x24
 8000a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a62:	4a45      	ldr	r2, [pc, #276]	; (8000b78 <OSThread_Create+0x184>)
 8000a64:	601a      	str	r2, [r3, #0]
    *(--sp) = 0xDEAD0000U; /* R0  */
 8000a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a68:	3b04      	subs	r3, #4
 8000a6a:	627b      	str	r3, [r7, #36]	; 0x24
 8000a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a6e:	4a43      	ldr	r2, [pc, #268]	; (8000b7c <OSThread_Create+0x188>)
 8000a70:	601a      	str	r2, [r3, #0]
    /* additionally, fake registers R4-R11 */
    *(--sp) = 0xDEAD000BU; /* R11 */
 8000a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a74:	3b04      	subs	r3, #4
 8000a76:	627b      	str	r3, [r7, #36]	; 0x24
 8000a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a7a:	4a41      	ldr	r2, [pc, #260]	; (8000b80 <OSThread_Create+0x18c>)
 8000a7c:	601a      	str	r2, [r3, #0]
    *(--sp) = 0xDEAD000AU; /* R10 */
 8000a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a80:	3b04      	subs	r3, #4
 8000a82:	627b      	str	r3, [r7, #36]	; 0x24
 8000a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a86:	4a3f      	ldr	r2, [pc, #252]	; (8000b84 <OSThread_Create+0x190>)
 8000a88:	601a      	str	r2, [r3, #0]
    *(--sp) = 0xDEAD0009U; /* R9 */
 8000a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a8c:	3b04      	subs	r3, #4
 8000a8e:	627b      	str	r3, [r7, #36]	; 0x24
 8000a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a92:	4a3d      	ldr	r2, [pc, #244]	; (8000b88 <OSThread_Create+0x194>)
 8000a94:	601a      	str	r2, [r3, #0]
    *(--sp) = 0xDEAD0008U; /* R8 */
 8000a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a98:	3b04      	subs	r3, #4
 8000a9a:	627b      	str	r3, [r7, #36]	; 0x24
 8000a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a9e:	4a3b      	ldr	r2, [pc, #236]	; (8000b8c <OSThread_Create+0x198>)
 8000aa0:	601a      	str	r2, [r3, #0]
    *(--sp) = 0xDEAD0007U; /* R7 */
 8000aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa4:	3b04      	subs	r3, #4
 8000aa6:	627b      	str	r3, [r7, #36]	; 0x24
 8000aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aaa:	4a39      	ldr	r2, [pc, #228]	; (8000b90 <OSThread_Create+0x19c>)
 8000aac:	601a      	str	r2, [r3, #0]
    *(--sp) = 0xDEAD0006U; /* R6 */
 8000aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab0:	3b04      	subs	r3, #4
 8000ab2:	627b      	str	r3, [r7, #36]	; 0x24
 8000ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab6:	4a37      	ldr	r2, [pc, #220]	; (8000b94 <OSThread_Create+0x1a0>)
 8000ab8:	601a      	str	r2, [r3, #0]
    *(--sp) = 0xDEAD0005U; /* R5 */
 8000aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000abc:	3b04      	subs	r3, #4
 8000abe:	627b      	str	r3, [r7, #36]	; 0x24
 8000ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ac2:	4a35      	ldr	r2, [pc, #212]	; (8000b98 <OSThread_Create+0x1a4>)
 8000ac4:	601a      	str	r2, [r3, #0]
    *(--sp) = 0xDEAD0004U; /* R4 */
 8000ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ac8:	3b04      	subs	r3, #4
 8000aca:	627b      	str	r3, [r7, #36]	; 0x24
 8000acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ace:	4a33      	ldr	r2, [pc, #204]	; (8000b9c <OSThread_Create+0x1a8>)
 8000ad0:	601a      	str	r2, [r3, #0]

    /* save the top of the stack in the thread's attibute */
    me->sp = sp;
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ad6:	601a      	str	r2, [r3, #0]

    /* round up the bottom of the stack to the 8-byte boundary */
    stk_limit = (u32 *)(((((u32)stack - 1U) / 8) + 1U) * 8);
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	3b01      	subs	r3, #1
 8000adc:	f023 0307 	bic.w	r3, r3, #7
 8000ae0:	3308      	adds	r3, #8
 8000ae2:	61fb      	str	r3, [r7, #28]

    /* pre-fill the unused part of the stack with 0xDEADBEEF */
    for (sp = sp - 1U; sp >= stk_limit; --sp) {
 8000ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae6:	3b04      	subs	r3, #4
 8000ae8:	627b      	str	r3, [r7, #36]	; 0x24
 8000aea:	e005      	b.n	8000af8 <OSThread_Create+0x104>
        *sp = 0xDEADBEEFU;
 8000aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aee:	4a1e      	ldr	r2, [pc, #120]	; (8000b68 <OSThread_Create+0x174>)
 8000af0:	601a      	str	r2, [r3, #0]
    for (sp = sp - 1U; sp >= stk_limit; --sp) {
 8000af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000af4:	3b04      	subs	r3, #4
 8000af6:	627b      	str	r3, [r7, #36]	; 0x24
 8000af8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000afa:	69fb      	ldr	r3, [r7, #28]
 8000afc:	429a      	cmp	r2, r3
 8000afe:	d2f5      	bcs.n	8000aec <OSThread_Create+0xf8>
    }

    if(OS_existSet == 0U)
 8000b00:	4b27      	ldr	r3, [pc, #156]	; (8000ba0 <OSThread_Create+0x1ac>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d102      	bne.n	8000b0e <OSThread_Create+0x11a>
    {
    	bit = 0U;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	623b      	str	r3, [r7, #32]
 8000b0c:	e00a      	b.n	8000b24 <OSThread_Create+0x130>
    }
    else
    {
    	bit = LOG2(OS_existSet) + 1;
 8000b0e:	4b24      	ldr	r3, [pc, #144]	; (8000ba0 <OSThread_Create+0x1ac>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8000b14:	69bb      	ldr	r3, [r7, #24]
 8000b16:	fab3 f383 	clz	r3, r3
 8000b1a:	75fb      	strb	r3, [r7, #23]
  return(result);
 8000b1c:	7dfb      	ldrb	r3, [r7, #23]
 8000b1e:	f1c3 0320 	rsb	r3, r3, #32
 8000b22:	623b      	str	r3, [r7, #32]
    }

    OS_thread[bit] = me;
 8000b24:	491f      	ldr	r1, [pc, #124]	; (8000ba4 <OSThread_Create+0x1b0>)
 8000b26:	6a3b      	ldr	r3, [r7, #32]
 8000b28:	68fa      	ldr	r2, [r7, #12]
 8000b2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    me->priority = prio;
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	7afa      	ldrb	r2, [r7, #11]
 8000b32:	721a      	strb	r2, [r3, #8]
    OS_existSet |= 1U << bit;
 8000b34:	2201      	movs	r2, #1
 8000b36:	6a3b      	ldr	r3, [r7, #32]
 8000b38:	409a      	lsls	r2, r3
 8000b3a:	4b19      	ldr	r3, [pc, #100]	; (8000ba0 <OSThread_Create+0x1ac>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4313      	orrs	r3, r2
 8000b40:	4a17      	ldr	r2, [pc, #92]	; (8000ba0 <OSThread_Create+0x1ac>)
 8000b42:	6013      	str	r3, [r2, #0]

    /* make the thread ready to run */
    OS_readySet |= 1U << bit;
 8000b44:	2201      	movs	r2, #1
 8000b46:	6a3b      	ldr	r3, [r7, #32]
 8000b48:	409a      	lsls	r2, r3
 8000b4a:	4b17      	ldr	r3, [pc, #92]	; (8000ba8 <OSThread_Create+0x1b4>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4313      	orrs	r3, r2
 8000b50:	4a15      	ldr	r2, [pc, #84]	; (8000ba8 <OSThread_Create+0x1b4>)
 8000b52:	6013      	str	r3, [r2, #0]

    return 1U << bit;
 8000b54:	2201      	movs	r2, #1
 8000b56:	6a3b      	ldr	r3, [r7, #32]
 8000b58:	fa02 f303 	lsl.w	r3, r2, r3
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	372c      	adds	r7, #44	; 0x2c
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bc80      	pop	{r7}
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	deadbeef 	.word	0xdeadbeef
 8000b6c:	dead000c 	.word	0xdead000c
 8000b70:	dead0003 	.word	0xdead0003
 8000b74:	dead0002 	.word	0xdead0002
 8000b78:	dead0001 	.word	0xdead0001
 8000b7c:	dead0000 	.word	0xdead0000
 8000b80:	dead000b 	.word	0xdead000b
 8000b84:	dead000a 	.word	0xdead000a
 8000b88:	dead0009 	.word	0xdead0009
 8000b8c:	dead0008 	.word	0xdead0008
 8000b90:	dead0007 	.word	0xdead0007
 8000b94:	dead0006 	.word	0xdead0006
 8000b98:	dead0005 	.word	0xdead0005
 8000b9c:	dead0004 	.word	0xdead0004
 8000ba0:	20000180 	.word	0x20000180
 8000ba4:	20000198 	.word	0x20000198
 8000ba8:	2000018c 	.word	0x2000018c

08000bac <__libc_init_array>:
 8000bac:	b570      	push	{r4, r5, r6, lr}
 8000bae:	2500      	movs	r5, #0
 8000bb0:	4e0c      	ldr	r6, [pc, #48]	; (8000be4 <__libc_init_array+0x38>)
 8000bb2:	4c0d      	ldr	r4, [pc, #52]	; (8000be8 <__libc_init_array+0x3c>)
 8000bb4:	1ba4      	subs	r4, r4, r6
 8000bb6:	10a4      	asrs	r4, r4, #2
 8000bb8:	42a5      	cmp	r5, r4
 8000bba:	d109      	bne.n	8000bd0 <__libc_init_array+0x24>
 8000bbc:	f000 f81a 	bl	8000bf4 <_init>
 8000bc0:	2500      	movs	r5, #0
 8000bc2:	4e0a      	ldr	r6, [pc, #40]	; (8000bec <__libc_init_array+0x40>)
 8000bc4:	4c0a      	ldr	r4, [pc, #40]	; (8000bf0 <__libc_init_array+0x44>)
 8000bc6:	1ba4      	subs	r4, r4, r6
 8000bc8:	10a4      	asrs	r4, r4, #2
 8000bca:	42a5      	cmp	r5, r4
 8000bcc:	d105      	bne.n	8000bda <__libc_init_array+0x2e>
 8000bce:	bd70      	pop	{r4, r5, r6, pc}
 8000bd0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000bd4:	4798      	blx	r3
 8000bd6:	3501      	adds	r5, #1
 8000bd8:	e7ee      	b.n	8000bb8 <__libc_init_array+0xc>
 8000bda:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000bde:	4798      	blx	r3
 8000be0:	3501      	adds	r5, #1
 8000be2:	e7f2      	b.n	8000bca <__libc_init_array+0x1e>
 8000be4:	08000c18 	.word	0x08000c18
 8000be8:	08000c18 	.word	0x08000c18
 8000bec:	08000c18 	.word	0x08000c18
 8000bf0:	08000c1c 	.word	0x08000c1c

08000bf4 <_init>:
 8000bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bf6:	bf00      	nop
 8000bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bfa:	bc08      	pop	{r3}
 8000bfc:	469e      	mov	lr, r3
 8000bfe:	4770      	bx	lr

08000c00 <_fini>:
 8000c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c02:	bf00      	nop
 8000c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c06:	bc08      	pop	{r3}
 8000c08:	469e      	mov	lr, r3
 8000c0a:	4770      	bx	lr
